@import url(http://fonts.googleapis.com/css?family=Open+Sans:400,700);

// requires $base-font-size & $content_width
@function gr($content-width) {
  
  $r: (1 + sqrt(5)) / 2; // phi "golden ratio"
  $x: 1 / (2 * $r);
  $y: $base-font-size * $r;
  $z: $content-width / ($y * $y);
  $h: $r - $x * (1 - $z);
  $l: $base-font-size * $h;
  
  @return round($l);
}

$columns: 12 !default;
$margin: 1.25 !default;
$class-slug: col !default;

$base: $base-font-size;
$scale: 3/4;

$h6: $base;
$h5: $base/$scale;
$h4: $h5/$scale;
$h3: $h4/$scale;
$h2: $h3/$scale;
$h1: $h2/$scale;

/*******************************
HEADER TYPOGRAPHY
********************************/

// according to Tim Brown (Typekit) our base-line-height is our magic number, so lets do some calculations with it!
.h1, .h2, .h3, .h4, .h5, .h6 {
  font-weight: 700;
  margin: rem($base_line_height) 0 rem($base_line_height/2);
}

.h1 {
  font-size: rem($h1);
  line-height: rem($h1 * 1.5);
}
.h2 {
  font-size: rem($h2);
  line-height: rem($h2 * 1.5);
}
.h3 {
  font-size: rem($h3);
  line-height: rem($h3 * 1.5);
}
.h4 {
  font-size: rem($h4);
  line-height: rem($h4 * 1.5);
}
.h5 {
  font-size: rem($h5);
  line-height: rem($h5 * 1.5);
}
.h6 {
  font-size: rem($h6);
  line-height: rem($h6 * 1.5);
}

.typeset {
	
	h1 { @extend .h1; }
	h2 { @extend .h2; }
	h3 { @extend .h3; }
	h4 { @extend .h4; }
	h5 { @extend .h5; }
	h6 { @extend .h6; }
}

p { word-wrap: break-word; }

.indent {
  text-indent: percentage($margin/100);
}

/*******************************
BODY TYPOGRAPHY & GRID CALC
********************************/

// used for centered content
.container {
	position: relative;
	max-width: $content-width + px;
	margin: 0 auto;
}

// the base of our columns class
[class*="#{$class-slug}-"] {
	position: relative;
	float: left;
	width: 97.5%;
	min-height: 1px;
	margin: percentage($margin/100);
	
	[class*="col-"] {
		margin: percentage($margin/100) 0;
	}
}

@mixin calculate-grid() { 
	[class*="col-"] {
		[class*="col-"] {
			margin: 0 percentage($margin/100) 0;
		}
	}

	// lets iterate through each column and create a class for it
	@for $i from 1 through $columns {
		
		$gw: $i / ($columns/100);
		$rw: $gw - $margin/100 * 2;
		$px_width: ($rw/100)*$content-width;
		$px_margin: ($margin/100) * $content-width;
		
		.#{$class-slug}-#{$i} {
			width: $gw - percentage($margin/100) * 2;
			line-height: gr($px_width - $px_margin*2) + px;
		}
		
		.collapse {
			.#{$class-slug}-#{$i} {
				width: $gw * 1%;
			}
		}
	}
}
@include calculate-grid;